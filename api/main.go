package main

import (
	"os"
	"time"

	swagger "github.com/arsmn/fiber-swagger/v2"
	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"
	"github.com/larvit/stock-manager/api/src/db"
	h "github.com/larvit/stock-manager/api/src/handlers"
	"github.com/larvit/stock-manager/api/src/utils"

	// docs are generated by Swag CLI, you have to import them.
	_ "github.com/larvit/stock-manager/api/docs"
)

// @title Stock Manager REST API
// @version 0.1

// @contact.name Larv IT Stock Manager
// @contact.url https://github.com/larvit/stock-manager
// @contact.email lilleman@larvit.se

// @license.name MIT

// @BasePath /
func main() {
	log := utils.GetLog()

	err := godotenv.Load()
	if err != nil {
		log.Info("Error loading .env file, this could be ok if the env file does not exist", "err", err.Error())
	}

	app := fiber.New()

	dbInst := db.Db{
		Log:   log,
		Stock: make(map[string]db.StockItem),
	}
	handlers := h.Handlers{
		Log: log,
		Db:  dbInst,
	}

	// Log all requests
	app.Use(handlers.LogReq)

	// Always require application/json
	app.Use(handlers.RequireJSON)

	app.Get("/", func(c *fiber.Ctx) error { return c.Redirect("/swagger/index.html") })
	app.Get("/swagger", func(c *fiber.Ctx) error { return c.Redirect("/swagger/index.html") })
	app.Get("/swagger/*", swagger.Handler)

	app.Get("/stock-balances", handlers.GetStockBalances)
	app.Post("/add-stock-items", handlers.PostAddStockItems)
	app.Post("/subtract-stock-items", handlers.PostSubtractStockItems)

	log.Info("Trying to start web server", "WEB_BIND_HOST", os.Getenv("WEB_BIND_HOST"))

	webBindHost := os.Getenv("WEB_BIND_HOST")
	err = app.Listen(webBindHost)
	for err != nil {
		log.Error("Could not start web server", "err", err.Error(), "WEB_BIND_HOST", webBindHost)
		time.Sleep(1 * time.Second)
		err = app.Listen(webBindHost)
	}

	log.Info("Webb server closed, shutting down")
}
